plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.epages.restdocs-api-spec' version '0.18.2' //rest-docs-openapi3
    id 'org.hidetake.swagger.generator' version '2.18.2' //swagger - ui
}
def generated = 'src/main/generated' // querydsl QClass 파일 생성 위치

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


repositories {
    mavenCentral()
}

swaggerSources {
    sample {
        setInputFile(file("docs/openapi3.yaml"))
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //bycrypt
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    //jwt 관련 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'

    // DB
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'com.h2database:h2'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "org.springdoc:springdoc-openapi-ui:1.6.11" // restdocs-openapi3
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2' // restdocs-openapi3
    swaggerUI 'org.webjars:swagger-ui:5.9.0'

    // object Storage
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.481'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //redisson
    implementation group: 'org.redisson', name: 'redisson', version: '3.24.2'
}

// restdocs-openapi3 설정 ===============================================================

openapi3 {
    server = "localhost"
    title = 'Petlink API'
    description = 'Petlink API description'
    version = '0.1.0'
    format = 'yaml'
    outputDirectory = "docs"
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

        def securitySchemesContent = "  securitySchemes:\n" +                           \
                                                               "    APIKey:\n" +                           \
                                                               "      type: apiKey\n" +                           \
                                                               "      name: Authorization\n" +                           \
                                                               "      in: header\n" +                          \
                                                               "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"
        swaggerUIFile.append securitySchemesContent
    }
}

// 11. 생성된 openapi3 스펙을 기반으로 SwaggerUISample 생성 및 static/docs 패키지에 복사
bootJar {
    dependsOn generateSwaggerUISample
    doLast {
        copy {
            from "${generateSwaggerUISample.outputDir}" // 'swagger-ui-sample' 디렉토리
            into "${project.rootDir}/docs"             // 프로젝트 루트의 'docs' 디렉토리로 복사
        }
    }
    println("Files copied from ${generateSwaggerUISample.outputDir} to ${project.rootDir}/docs")
}

// 기타 설정부분 ===============================================================

jar {
    // plane jar 파일 생성 안함
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부분 ===============================================================


// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
